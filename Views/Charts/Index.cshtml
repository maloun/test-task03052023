@using demo.Views.Charts
@model ChartsLimits

<script src="~/js/canvasjs.min.js"></script>
<script src="~/js/Charts.js"></script>

<div class="container">
<div class="charts">
	<div>
		с <input id="HouseFrom" class="HouseFilter" type="date" />
		по <input id="HouseTo" class="HouseFilter" type="date" />
	</div>
	<div>
		с <input id="PlantsFrom" class="PlantsFilter" type="date" />
		по <input id="PlantsTo" class="PlantsFilter" type="date" />
	</div>

	<div id="housesConsumption" class="chart"></div>
	<div id="plantsConsumption" class="chart"></div>
	<br/>
	<div id="housesTrands" class="chart"></div>
	<div id="plantsTrands" class="chart"></div>
	<br/>
	<div id="housesForecast" class="chart"></div>
	<div id="plantsForecast" class="chart"></div>	
</div>
</div>
<script>
	var HousesConsumption = null,
		PlantsConsumption = null,
		HousesTrands = null,
		PlantsTrands = null,
		HousesForecast = null,
		PlantsForecast = null;

	function RequestHouseData() {
		var filterDate = filtersToStrObj(HouseFrom, HouseTo);
		if (!EnsureFiltersChanged(HouseFrom, HouseTo)) return;

		$.ajax({
			url: "/Charts/GetHouseData?from=" + filterDate.from + "&to=" + filterDate.to,
			type: 'GET',
			error:  (data) => alert("ошибка загрузки"),
			success: function (data) 
			{
				data = JSON.parse(data);
					
				renderChart(HousesConsumption, () => newChart(
					"housesConsumption", "Потребление (дома)", "DD MMM YY", "Погода", [
						newAxis("потребление тепла", "#F08080", data.Consumption)])
				);
				renderChart(HousesTrands, () => newChart(
					"housesTrands", "Тренд (дома)", "DD MMM YY", "Погода", [
					newAxis("потребление тепла", "#DDDDDD", data.Consumption),
					newAxis("тренд", "#F08080", data.LinearTrand)
				])
				);
				renderChart(HousesForecast, () => newChart(
					"housesForecast", "Прогноз (дома)", "DD MMM YY", "Погода", [
					newAxis("потребление тепла", "#DDDDDD", data.Consumption),
					newAxis("тренд", "#5F7CBB", data.Forecast)
				])
				);		
			}
		});
	}
		
	function RequestPlantsData() {
		var filterDate = filtersToStrObj(PlantsFrom, PlantsTo);
		if (!EnsureFiltersChanged(PlantsFrom, PlantsTo)) return;

		$.ajax({
			url: "/Charts/GetPlantsData?from=" + filterDate.from + "&to=" + filterDate.to,
			type: 'GET',
			error: (data) => alert("ошибка загрузки"),
			success: function (data) {
				data = JSON.parse(data);
					
				renderChart(PlantsConsumption, () => newChart(
					"plantsConsumption", "Потребление (заводы)", "DD MMM YY", "Погода", [
					newAxis("потребление тепла", "#F08080", data.Consumption)])
				);
				renderChart(PlantsTrands, () => newChart(
					"plantsTrands", "Тренд (заводы)", "DD MMM YY", "Погода", [
					newAxis("потребление тепла", "#DDDDDD", data.Consumption),
					newAxis("тренд", "#F08080", data.LinearTrand)
					])
				);
				renderChart(PlantsForecast, () => newChart(
					"plantsForecast", "Прогноз (заводы)", "DD MMM YY", "Погода", [
					newAxis("потребление тепла", "#DDDDDD", data.Consumption),
					newAxis("тренд", "#5F7CBB", data.Forecast)
					])
				);					
			}
		});
	}			

	$(document).ready(function () {
		$("#HouseFrom").val("@Model.HouseLimits.from.ToString("yyyy-MM-dd")");
		$("#HouseTo").val("@Model.HouseLimits.to.ToString("yyyy-MM-dd")");
		$("#PlantsFrom").val("@Model.PlantsLimits.from.ToString("yyyy-MM-dd")");
		$("#PlantsTo").val("@Model.PlantsLimits.to.ToString("yyyy-MM-dd")");
		$(".HouseFilter").on("focusout", RequestHouseData);
		$(".PlantsFilter").on("focusout", RequestPlantsData);
		RequestHouseData();
		RequestPlantsData();
	});				
</script>
